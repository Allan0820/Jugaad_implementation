@load base/frameworks/sumstats
@load base/protocols/dns
@load base/utils/urls
@load base/init-bare
@load base/protocols/dhcp/main
@load base/protocols/http/entities.bro
@load base/protocols/http
@load base/files/x509

# This program records the following 14 parameter for every unique (SrcIP,DstIP) pair
redef enum Log::ID += { LOG };

type new_features: record {
    uid: string &log;
    conn_det: conn_id &log;
    URL: string &log &optional;
    URL_query_names: set[string] &log;
    URL_query_values: set[string] &log;
    URL_path: set[string] &log;
    URL_path_length: count &default = 0 &log;
    number_of_URL_query_parameters: count &log &default = 0 &optional;
    filename: set[string] &log;
    filename_length: count &log &optional;
    interarrival_time: interval &log &optional;
    number_of_flows: count &log &optional;
    number_of_downloaded_bytes: count &log &optional &default = 0;
    number_of_uploaded_bytes: count &log &optional &default = 0;  
    server_IP_address: addr &log &optional;
    hostname: string &log &optional;
};

# List of all the records to be logged and an inter_arrival_time vector for periodicity analysis
global rec_list: table[string] of new_features;
global inter_arr_time: table[string] of vector of time;

event bro_init(){
    local f = Log::get_filter(X509::LOG,"default");
    f$path = "X509";
    Log::add_filter(X509::LOG,f);
	Log::create_stream(LOG, [$columns=new_features, $path="new_features2"]);
    # local r1 = SumStats::Reducer($stream="avg_fo",$apply=set(SumStats::SUM));
}

event HTTP::log_http (rec: HTTP::Info){
    local rec1: URI;
    local conn_det= rec$uid;
    local dest_url = rec$uri;
    print (rec$uid);

    print (rec$host);



    if(conn_det in rec_list){

        local rec3: new_features= rec_list[conn_det];
        if (dest_url != "") {
        rec1=decompose_uri(dest_url);
        rec3$URL=dest_url;
        if(rec1?$params){
        for (name in rec1$params){
            add rec3$URL_query_names[name];
            add rec3$URL_query_values[rec1$params[name]];
        }
        add rec3$URL_path[rec1$path];

	rec3$hostname = rec$host;

        if(rec1?$file_name){
            add rec3$filename[rec1$file_name];
        }
	}
	}
  
        if(rec?$orig_filenames){
            for (i in rec$orig_filenames){
                add rec3$filename[rec$orig_filenames[i]];
            }
        }
        if(rec?$resp_filenames){
            for (i in rec$resp_filenames){
                add rec3$filename[rec$resp_filenames[i]];
            }
        }

	print ("case1");
	print (rec$request_body_len);
	print (rec$response_body_len);
        if(rec?$request_body_len){
            rec3$number_of_uploaded_bytes+=rec$request_body_len;
        }
        if(rec?$response_body_len){

            rec3$number_of_downloaded_bytes+=rec$response_body_len;
        }

	print (rec3$number_of_uploaded_bytes);
	print (	rec3$number_of_downloaded_bytes);
        inter_arr_time[conn_det][|inter_arr_time[conn_det]|]=rec$ts;
        rec3$number_of_flows+=1;
        
        rec_list[conn_det]=rec3;
    }
    else{
        local rec2: new_features;
        local inter: vector of time;
        rec2$conn_det=rec$id;
        rec2$uid=rec$uid;
        if (dest_url != "") {
        rec1=decompose_uri(dest_url);
        rec2$URL=dest_url;

	rec2$hostname = rec$host;


        if(rec1?$params){
        for (name in rec1$params){
            add rec2$URL_query_names[name];
            add rec2$URL_query_values[rec1$params[name]];
        }
        add rec2$URL_path[rec1$path];
        # if(rec2?$file_name){
            add rec2$filename[rec1$file_name];
        # }
        }
        }
        if(rec?$orig_filenames){
            for (i in rec$orig_filenames){
                add rec2$filename[rec$orig_filenames[i]];
            }
        }
        if(rec?$resp_filenames){
            for (i in rec$resp_filenames){
                add rec2$filename[rec$resp_filenames[i]];
            }
        }

	print ("case2");
	print (rec$request_body_len);
	print (rec$response_body_len);

        if(rec?$request_body_len){
	    print ("first if");
            rec2$number_of_uploaded_bytes+=rec$request_body_len;
        }
        else{
	    print ("first if else ");;
            rec2$number_of_uploaded_bytes=0;
        }
        if(rec?$response_body_len){
	    print ("secod if");
            rec2$number_of_downloaded_bytes+=rec$response_body_len;
        }
        rec2$number_of_flows=1;
        inter[|inter|]=rec$ts;
        inter_arr_time[conn_det]=inter;
        rec_list[conn_det]=rec2;


	print (rec2$number_of_uploaded_bytes);
	print (	rec2$number_of_downloaded_bytes);
    }
}

 

event connection_reused(c: connection) {
    local rec1: URI;
    local  conn_det=c$id;
    if([conn_det] in rec_list){
        local rec3 = rec_list[conn_det];
        rec3$number_of_downloaded_bytes+=c$resp$num_bytes_ip;
        rec3$number_of_uploaded_bytes+=c$orig$num_bytes_ip;
        rec3$number_of_flows+=1;
        inter_arr_time[conn_det][|inter_arr_time[conn_det]|]=c$start_time;
        rec_list[conn_det]=rec3;
    }
    else{
        local rec2: new_features;
        local inter: vector of time;
        rec2$conn_det=c$id;
        rec2$number_of_downloaded_bytes=c$resp$num_bytes_ip;
        rec2$number_of_uploaded_bytes=c$orig$num_bytes_ip;
        rec2$number_of_flows=1;
        inter[|inter|]=c$start_time;
        inter_arr_time[conn_det]=inter;
        rec_list[conn_det]=rec2;
    }
}

To be used for the parameters ServerIP and Hostname 
event DHCP::log_dhcp(c: DHCP::Info){ #event DNS::log_dns(c: DNS::Info)
    for ([conn_det] in rec_list){
    	if(c?$assigned_addr){
        if(conn_det$orig_h == c$assigned_addr){
            rec_list[conn_det]$hostname=c$host_name;
            rec_list[conn_det]$server_IP_address=c$server_addr;
        }
        }
    }
}
event bro_done(){

    for ([conn_det] in rec_list){
        local rec1 = rec_list[conn_det];
        if(rec1?$URL_path){
        rec1$URL_path_length=|rec1$URL_path|;
        rec1$number_of_URL_query_parameters=|rec1$URL_query_names|;
        rec1$filename_length=|rec1$filename|;
        }
        local diff: interval;
        diff=0sec;
        for ([i] in inter_arr_time[conn_det]){
            if(i != 0){                
                diff+=inter_arr_time[conn_det][i]-inter_arr_time[conn_det][i-1];
            }
        }
        diff=diff/|inter_arr_time[conn_det]|;
        rec1$interarrival_time=diff;
        Log::write( LOG, rec1);
    }
	
}
