@load packettrack
@load base/protocols/socks
@load base/frameworks/sumstats
@load base/protocols/http
@load base/protocols/conn

global time_period: table[addr, string] of interval;
global prev_time: table[addr, string] of time;
global is_periodic: table[addr, string] of bool;
global total_requests: table[addr, string] of count;
global time_period_ip: table[conn_id] of interval;
global prev_time_ip: table[conn_id] of time;
global is_periodic_ip: table[conn_id] of bool;
global total_requests_ip: table[conn_id] of count;
redef enum Log::ID += { LOG };

type Info: record {
    conn_det: conn_id &log;
    destination_url: string &log &optional;
    total_requests: count &log;
    periodicity: double &log &optional;
};
global records: vector of Info;

global ind = 0;
global time_beg = network_time();

event bro_init() {
    Log::create_stream(LOG, [$columns=Info, $path="out_log_5"]);
}

event http_all_headers(c: connection, is_orig: bool, hlist: mime_header_list) {
    local conn_det=c$id;
    local dest_url = "";
    for ([index] in hlist) {
        if (hlist[index]$name == "HOST") {
            dest_url = hlist[index]$value;
        }
    }
    if (dest_url != "") {
        if ([conn_det$orig_h, dest_url] in prev_time) {
            if(is_periodic[conn_det$orig_h, dest_url]) {
                local time_int = c$http$ts - prev_time[conn_det$orig_h, dest_url];
                if(!([conn_det$orig_h, dest_url] in time_period))
                    time_period[conn_det$orig_h, dest_url] = time_int;
                else {
                    local threshold = 1sec;
                    local threshold_packets = 10;
                    if (!(time_int <= time_period[conn_det$orig_h, dest_url] + threshold && time_int >= time_period[conn_det$orig_h, dest_url] - threshold)) {
                        if (total_requests[conn_det$orig_h, dest_url] < threshold_packets)
                            is_periodic[conn_det$orig_h, dest_url] = F;
                    }
                }
            }
            prev_time[conn_det$orig_h, dest_url] = c$http$ts;
            ++total_requests[conn_det$orig_h, dest_url];
        } else {
            prev_time[conn_det$orig_h, dest_url] = c$http$ts;
            is_periodic[conn_det$orig_h, dest_url] = T;
            total_requests[conn_det$orig_h, dest_url] = 1;
        }
    }

    if ([conn_det] in prev_time_ip) {
        if(is_periodic_ip[conn_det]) {
            time_int = c$http$ts - prev_time_ip[conn_det];
            if(!([conn_det] in time_period_ip))
                time_period_ip[conn_det] = time_int;
            else {
                threshold = 1sec;
                threshold_packets = 10;
                if (!(time_int <= time_period_ip[conn_det] + threshold && time_int >= time_period_ip[conn_det] - threshold))
                    if (total_requests_ip[conn_det] < threshold_packets)
                        is_periodic_ip[conn_det] = F;
            }
        }
        prev_time_ip[conn_det] = c$http$ts;
        ++total_requests_ip[conn_det];
    } else {
        prev_time_ip[conn_det] = c$http$ts;
        is_periodic_ip[conn_det] = T;
        total_requests_ip[conn_det] = 1;
    }
}


global time_period_conn: table[conn_id] of interval;
global prev_time_conn: table[conn_id] of time;
global is_periodic_conn: table[conn_id] of bool;
global total_requests_conn: table[conn_id] of count;

event connection_reused(c: connection) {
    local conn_det=c$id;
    if ([conn_det] in prev_time_conn) {
        if(is_periodic_conn[conn_det]) {
            local time_int = c$start_time - prev_time_conn[conn_det];
            if(!([conn_det] in time_period_conn))
                time_period_conn[conn_det] = time_int;
            else {
                local threshold = 1sec;
                local threshold_packets = 10;
                if (!(time_int <= time_period_conn[conn_det] + threshold && time_int >= time_period_conn[conn_det] - threshold))
                    if (total_requests_conn[conn_det] < threshold_packets)
                        is_periodic_conn[conn_det] = F;
            }
        }
        prev_time_conn[conn_det] = c$start_time;
        ++total_requests_conn[conn_det];
    } else {
        prev_time_conn[conn_det] = c$start_time;
        is_periodic_conn[conn_det] = T;
        total_requests_conn[conn_det] = 1;
    }
}

event bro_done() {
    for ([i] in is_periodic_conn) {
        if(is_periodic_conn[i] && total_requests_conn[i] > 2) {
            local periodicity: double = |interval_to_double(time_period_conn[i])|;
            Log::write(LOG, [
                $conn_det=i,
                $total_requests=total_requests_conn[i],
                $periodicity=periodicity]);
        }
    }

    for ([i] in is_periodic_ip) {
        if(is_periodic_ip[i] && total_requests_ip[i] > 2) {
            periodicity = |interval_to_double(time_period_ip[i])|;
            Log::write(LOG, [
                $conn_det=i,
                $total_requests=total_requests_ip[i],
                $periodicity=periodicity]);
        }
    }
}

